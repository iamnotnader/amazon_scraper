// Generated by CoffeeScript 1.8.0
(function() {
  var ListingsController, ResultsController, utils;

  utils = require('../utils/utils');

  ResultsController = require('./results_controller');

  ListingsController = ResultsController.extend({
    listedItems: [],
    fetchingListedItems: true,
    exportDisabled: (function() {
      return this.get('resultSetName') === '';
    }).property('resultSetName'),
    actions: {
      showResultsButtonPressed: (function() {
        var topContext;
        topContext = this;
        topContext.set('resultSetName', topContext.get('selectedResult'));
        console.log('SHOW RESULT PRESSED');
        topContext.set('fetchingListedItems', true);
        return utils.get_url('http://' + utils.BACKEND_URL + '/listed_items_for_result_set/' + this.get('resultSetName')).then(function(succ_ret) {
          var batteryType, item, listedItemIndices, listedItems, listingIndex, manufacturer_id, parsedResult, skuPrefix, _i, _len;
          parsedResult = $.parseJSON(succ_ret);
          topContext.set('minPrices', parsedResult[0].min_prices);
          topContext.set('skuPrefix', parsedResult[0].sku_prefix);
          topContext.set('discountPercent', parsedResult[0].discount_percent);
          topContext.set('minimumPrice', parsedResult[0].minimum_price);
          listedItemIndices = parsedResult[0].listed_items;
          listedItems = [];
          for (_i = 0, _len = listedItemIndices.length; _i < _len; _i++) {
            item = listedItemIndices[_i];
            listingIndex = item.listing_index;
            batteryType = item.batteryType;
            manufacturer_id = item.manufacturer_id;
            skuPrefix = topContext.get('skuPrefix');
            listedItems.push({
              asin: item.asin,
              sku: skuPrefix + '_' + batteryType + '_' + manufacturer_id + '_' + item.rank,
              price: (utils.determine_price(batteryType, topContext.get('minPrices'), Number(item.price.trim().replace('$', '')), topContext.get('discountPercent'))).toFixed(2),
              listing_index: listingIndex,
              battery_type: batteryType
            });
          }
          topContext.set('listedItems', listedItems);
          return topContext.set('fetchingListedItems', false);
        }, function(err_ret) {
          console.log('ERROR FETCHING LISTINGS!');
          return topContext.set('fetchingListedItems', false);
        });
      }),
      exportPressed: (function() {
        var topContext, waitForListedItems;
        topContext = this;
        if (topContext.get('resultSetName') !== topContext.get('selectedResult')) {
          topContext.send('showResultsButtonPressed');
        }
        waitForListedItems = function() {
          var columnNames, csvContent, encodedUri, item, link, listedItems, _i, _len;
          if (topContext.get('fetchingListedItems')) {
            setTimeout(waitForListedItems, 100);
            return;
          }
          listedItems = topContext.get('listedItems');
          csvContent = "data:text/csv;charset=utf-8,";
          columnNames = "sku,product-id,product-id-type,price,item-condition,quantity,add-delete,will-ship-internationally,expedited-shipping,standard-plus,item-note,fulfillment-center-id,product-tax-code,leadtime-to-ship\n";
          csvContent += columnNames;
          for (_i = 0, _len = listedItems.length; _i < _len; _i++) {
            item = listedItems[_i];
            csvContent += item.sku + ',' + item.asin + ',1,' + item.price + ',11,40,a,y,"Next, Second, Domestic, International",,"Brand New Compatible Battery, Superior Tech Rover Quality, 30-Day Any Reason Return Policy with Unmatched Tech Rover Customer Service! Buy with confidence from a knowledgeable US seller you can trust.",,,1\n';
          }
          encodedUri = encodeURI(csvContent);
          link = document.createElement("a");
          link.setAttribute("href", encodedUri);
          link.setAttribute("download", topContext.get('resultSetName') + '.csv');
          return link.click();
        };
        return waitForListedItems();
      }),
      deleteEntry: (function(sku) {
        var i, indexToDelete, item, listedItems, topContext, _i, _len;
        topContext = this;
        listedItems = topContext.get('listedItems');
        indexToDelete = -1;
        for (i = _i = 0, _len = listedItems.length; _i < _len; i = ++_i) {
          item = listedItems[i];
          if (item.sku === sku) {
            indexToDelete = i;
            break;
          }
        }
        if (indexToDelete !== -1) {
          return utils.upload_data_promise('http://' + utils.BACKEND_URL + '/remove_listing_from/' + topContext.get('resultSetName'), {
            listing_index: listedItems[indexToDelete].listing_index,
            battery_type: listedItems[indexToDelete].battery_type
          }).then(function(succ_ret) {
            listedItems.splice(indexToDelete, 1);
            topContext.propertyDidChange('listedItems');
            console.log(succ_ret);
            return console.log('SUCCESS!');
          }, function(err_ret) {
            console.log(err_ret);
            return console.log('ERROR');
          });
        }
      })
    }
  });

  module.exports = ListingsController;

}).call(this);
