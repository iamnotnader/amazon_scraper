// Generated by CoffeeScript 1.8.0
(function() {
  var RESULTS_PER_PAGE, ResultSetController, utils;

  utils = require('../utils/utils');

  RESULTS_PER_PAGE = 100;

  ResultSetController = Ember.ObjectController.extend({
    DEFAULT_SKU_PREFIX: 'TECHROVER_SKU',
    finalCleanedList: [],
    resultSetName: '',
    minPrices: {},
    skuPrefix: '',
    discountPercent: '',
    minimumPrice: '',
    percentOfPagesFetched: 0,
    lineAboveProgressBar: '',
    timeRemaining: '',
    pages: (function() {
      var finalCleanedList, i, item, page, pages, _i, _len;
      finalCleanedList = this.get('finalCleanedList');
      if (finalCleanedList == null) {
        return;
      }
      pages = [];
      page = [];
      for (i = _i = 0, _len = finalCleanedList.length; _i < _len; i = ++_i) {
        item = finalCleanedList[i];
        if (i % RESULTS_PER_PAGE === 0 && i !== 0) {
          pages.push(page);
          page = [];
        }
        page.push(item);
      }
      if (page.length > 0) {
        pages.push(page);
      }
      return pages;
    }).property('finalCleanedList'),
    currentPageIndex: 0,
    _setPage: function(newPageIndex) {
      var currentPageItems, elem, i, processProductInfoEfficiently, startTime, temp, thingsProcessed, thingsToProcess, topContext, _i, _len, _parseDeepPage, _setTimeRemaining;
      console.log('NEW PAGE INDEX: ' + newPageIndex);
      this.set('currentPageIndex', Number(newPageIndex));
      currentPageItems = this.get('currentPage');
      topContext = this;
      _parseDeepPage = function(html_page) {
        var responseDom, ret;
        responseDom = document.createElement('div');
        responseDom.innerHTML = html_page;
        ret = {};
        ret.technicalDetails = responseDom.querySelector('#technical-data .content ul');
        ret.technicalDetails = ret.technicalDetails ? ret.technicalDetails.outerHTML.trim() : 'NONE';
        ret.productDescription = responseDom.querySelector('#detail-bullets ul');
        ret.productDescription = ret.productDescription ? ret.productDescription.outerHTML.trim() : 'NONE.';
        ret.manufacturer = responseDom.querySelector('#brandByline_feature_div a ');
        ret.manufacturerLink = ret.manufacturer ? 'http://www.amazon.com/' + ret.manufacturer.getAttribute('href') : '';
        ret.manufacturer = ret.manufacturer ? ret.manufacturer.innerText : 'NONE';
        return ret;
      };
      thingsToProcess = [];
      thingsProcessed = 0;
      topContext.set('lineAboveProgressBar', 'Fetching product info: ' + thingsProcessed + ' of ' + currentPageItems.length);
      topContext.set('timeRemaining', 'Time remaining: ?');
      startTime = Date.now();
      _setTimeRemaining = function(startTime, numRequestsReturned, numRequestsToMake) {
        var secondsRemaining;
        secondsRemaining = ((Date.now() - startTime) / numRequestsReturned) * (numRequestsToMake - numRequestsReturned) / 1000.;
        if (secondsRemaining <= 60) {
          return topContext.set('timeRemaining', 'Time remaining: ' + secondsRemaining.toFixed(0) + ' seconds.');
        } else {
          return topContext.set('timeRemaining', 'Time remaining: ' + (secondsRemaining / 60).toFixed(0) + ' minutes.');
        }
      };
      processProductInfoEfficiently = function() {
        var index, key, payload, succ_data, thing, value;
        console.log('PROCESSING');
        if (thingsProcessed === currentPageItems.length) {
          console.log('RETURNING ' + thingsProcessed);
          topContext.set('lineAboveProgressBar', '');
          topContext.propertyDidChange('finalCleanedList');
          return;
        }
        if (thingsToProcess.length > 0) {
          thing = thingsToProcess.pop();
          succ_data = thing[0];
          index = thing[1];
          payload = _parseDeepPage(succ_data);
          console.log(payload);
          for (key in payload) {
            value = payload[key];
            currentPageItems[index][key] = value;
          }
          thingsProcessed += 1;
          console.log("Processed " + thingsProcessed + " things.");
          topContext.set('lineAboveProgressBar', 'Fetching product info: ' + thingsProcessed + ' of ' + currentPageItems.length);
          _setTimeRemaining(startTime, thingsProcessed, currentPageItems.length);
          topContext.set('percentOfPagesFetched', (thingsProcessed / currentPageItems.length) * 100);
        }
        return setTimeout(processProductInfoEfficiently, 0);
      };
      for (i = _i = 0, _len = currentPageItems.length; _i < _len; i = ++_i) {
        elem = currentPageItems[i];
        temp = function(index) {
          console.log('http://www.amazon.com/dp/' + currentPageItems[index].asin);
          return utils.get_url('http://www.amazon.com/dp/' + currentPageItems[index].asin).then(function(succ_data) {
            return thingsToProcess.push([succ_data, index]);
          });
        };
        temp(i);
      }
      return processProductInfoEfficiently();
    },
    currentPage: (function() {
      var currentPageIndex, pages;
      pages = this.get('pages');
      currentPageIndex = this.get('currentPageIndex');
      if (!((pages != null) && (currentPageIndex != null))) {
        return;
      }
      return pages[currentPageIndex];
    }).property('pages', 'currentPageIndex'),
    actions: {
      changePage: function(newPageIndex) {
        return this._setPage(newPageIndex);
      },
      listButtonPressed: function(batteryType, itemIndex, manufacturer, manufacturerLink) {
        if (this.get('resultSetName') === '') {
          alert('You must save your results before you can start adding listings.');
          return;
        }
        if (manufacturer == null) {
          alert('You must wait until a manufacturer is available before you can list.');
          return;
        }
        console.log('RESULT SET NAME: ' + this.get('resultSetName'));
        return utils.upload_data_promise('http://' + utils.BACKEND_URL + '/add_listing_to/' + this.get('resultSetName'), {
          batteryType: batteryType,
          listing_index: itemIndex,
          manufacturer: manufacturer,
          manufacturerLink: manufacturerLink
        }).then(function(succ_ret) {
          console.log(succ_ret);
          return console.log('SUCCESS!');
        }, function(err_ret) {
          console.log(err_ret);
          return console.log('ERROR');
        });
      }
    }
  });

  module.exports = ResultSetController;

}).call(this);
